[{"title":"GIT常用命令","date":"2017-01-20T11:20:23.000Z","path":"2017/01/20/git-cmd.html","text":"一、git hello world1234561. git init 创建一个git项目,.git文件。2. git add &lt;files&gt; 2.1 git add hello.txt 单文件添加 2.2 git add 1.txt 2.txt 多文件添加 2.3 git add . 添加全部3. git commit -m &quot;提示信息&quot; 提交 二、基础命令 status diff12341. git status 查看仓库当前状态。2. git diff &lt;filename&gt; 查看具体文件修改内容 三、版本回退1234567891. 查看提交历史 git log git log --pretty=oneline2. 回退版本 git reset --hard^ ^表示回退到上一个版本 有几个^就表示回退到上几个版本 git reset --hard~100 回退到上 git reset --hard &lt;versionNO&gt; versionNO可以就是前几位3.查看命令历史 git reflog 四、工作区与暂存区12341. 可以简单的把一个git项目分成两部分 工作区、版本库（.git）2. 工作区就是我们平时写的代码,如hello world.txt3. 版本库分为 暂存区（stage）和分支（branch）4. git add 工作区→暂存区 git commit 暂存区→分支 五、撤销操作1234567891011121. 修改后 未add（添加到暂存区） 需要撤销修改时： git checkout -- myfile.txt 或 手动删除工作区修改 工作区 ： clean 暂存区： clean2. 修改后 add了（未commit） 再次修改文件 要撤销第二次修改时： git checkout -- myfile.txt (将暂存区恢复到工作区) 暂存区有第一次的修改需要commit3. 修改后 add了（未commit），需要撤销修改时： git reset HEAD myfile.txt (将暂存区修改删除) 此时工作区的修改还未撤销 git checkout -- myfile.txt (撤销工作区修改)4. 修改后 add并commit了，需要撤销修改时： git reset --hard HEAD^ (版本回退)** 六、删除文件12345671. 删除工作区文件 rm &lt;filename&gt;2. 删除暂存区文件 git rm &lt;filename&gt;3. 删除文件 git rm &lt;filename&gt; git commit -m &quot;remove filename&quot; 七、远程库1234561. 本地推送到远程库 ①关联远程库 git remote add origin https://github.com/BestRumbleCN/learngit.git ②第一次推送master分支 git push -u origin master ③推送最新修改 git push origin master2. 从远程库克隆 git clone https://github.com/BestRumbleCN/learngit.git 八、分支操作123451.查看分支 git branch2.创建分支 git branch &lt;name&gt;3.切换分支 git checkout &lt;name&gt;4.合并某分支到当前分支 git merge &lt;name&gt;5.删除分支 git branch -d &lt;name&gt; 九、解决冲突1git log --graph 可以看到分支合并图 十、分支策略12尽量不适用Fast Forward模式，通过命令参数（--no-ff）git merge --no-ff -m &quot;merge with no-ff&quot; dev 十一、Bug分支123456781.将当前工作现场储藏 git stash2.创建bug分支 修改 提交到主干 删除bug分支3.恢复原工作现场 1.git stash apply（stash内容并不删除，git stash drap 删除） 2.git stash pop（恢复并删除stash）4.可多次stash，恢复的时候使用 git stash list 查看， 恢复指定stash使用 git stash apply stash&#123;0&#125; 十二、多人协作123456789101.首先，试图推送自己的修改 git push origin &lt;branchName&gt;2.如果推送失败，远程分支有新版本 git pull3.如果有冲突，则解决冲突，并在本地提交4.再次提交 git push origin &lt;branchName&gt;5.在本地创建和远程分支同步的分支 git checkout -b &lt;branchName&gt; origin/&lt;branchName&gt; 等价于 ①git checkout -b &lt;branchName&gt; ②git pull origin &lt;branchName&gt; 十三、标签123456781.创建标签 git tag －a “v1.0” -m “git learning version 1.0”2.推送标签 git push origin v1.0 / git push origin —tags3.删除标签 git tag －d v1.04.删除远程标签 its push origin :refs/tags/v1.0 原文链接","tags":[{"name":"git","slug":"git","permalink":"http://zenghua.info/tags/git/"}]},{"title":"tomcat多端口多域名访问","date":"2016-12-20T11:20:23.000Z","path":"2016/12/20/tomcat-domain-port.html","text":"多端口访问新建一个协议为http类型的Connector(连接器) ,修改端口号12&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /&gt;&lt;Connector port=\"80\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /&gt; 此时端口80和8080都可以访问tomcat中的项目 多域名访问(同端口)复制一个host1234567891011121314&lt;Host name=\"www.iili.xyz\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\"&gt; &lt;Context path=\"\" docBase=\"/myweb1\"/&gt; &lt;Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" prefix=\"localhost_access_log\" suffix=\".txt\" pattern=\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\" /&gt;&lt;/Host&gt;&lt;Host name=\"www.21st.com\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\"&gt; &lt;Context path=\"\" docBase=\"/myweb2\"/&gt; &lt;Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" prefix=\"localhost_access_log\" suffix=\".txt\" pattern=\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\" /&gt; &lt;/Host&gt; www.iili.xyz指定的是webapps文件夹下面的myweb1项目www.21st.com指定的是webapps文件夹下面的myweb2项目 appBase和docBase的区别其实appBase和docBase都可以设置域名映射哪个项目，但是appBase：这个目录下面的子目录将自动被部署为应用，且war文件将被自动解压缩并部署为应用，默认为tomcat下webapps目录，如果不想访问默认ROOT目录，修改这里，同理如果想访问配置目录下应用为默认应用，在此目录下新增ROOT目录文件夹。docBase：只是指向了你某个应用的目录，这个可以和appBase没有任何关系 tomcat多域名访问（不同的端口号）复制一个service对Service name、监听端口、域名名称、默认加载的应用 进行修改。","tags":[{"name":"tomcat","slug":"tomcat","permalink":"http://zenghua.info/tags/tomcat/"}]},{"title":"DispatcherServlet调度流程","date":"2016-11-20T13:20:23.000Z","path":"2016/11/20/springmvc-dispatcherServlet.html","text":"DispatcherServlet是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，而且负责职责的分派，而且与Spring IoC容器无缝集成，从而可以获得Spring的所有好处。 DispatcherServlet主要用作职责调度工作，本身主要用于控制流程，主要职责如下：1、文件上传解析，如果请求类型是multipart将通过MultipartResolver进行文件上传解析；2、通过HandlerMapping，将请求映射到处理器（返回一个HandlerExecutionChain，它包括一个处理器、多个HandlerInterceptor拦截器）；3、通过HandlerAdapter支持多种类型的处理器(HandlerExecutionChain中的处理器)；4、通过ViewResolver解析逻辑视图名到具体视图实现；5、本地化解析；6、渲染具体的视图等；7、如果执行过程中遇到异常将交给HandlerExceptionResolver来解析。 从以上我们可以看出DispatcherServlet主要负责流程的控制（而且在流程中的每个关键点都是很容易扩展的）。","tags":[{"name":"springmvc","slug":"springmvc","permalink":"http://zenghua.info/tags/springmvc/"}]},{"title":"css中display/visibility和html中hidden的区别","date":"2016-11-14T12:01:23.000Z","path":"2016/11/14/display-visibility-hidden.html","text":"用法：12345678&lt;div style=\"display:\"&gt;显示&lt;/div&gt;&lt;div style=\"display:none;\"&gt;隐藏不占位&lt;/div&gt;&lt;div style=\"visibility:\"&gt;显示&lt;/div&gt;&lt;div style=\"visibility:hidden;\"&gt;隐藏占位&lt;/div&gt;&lt;div &gt;显示&lt;/div&gt;&lt;div hidden=\"hidden\"&gt;消失不占位&lt;/div&gt;或者&lt;div hidden&gt;消失不占位&lt;/div&gt; 说明：123456789101112131415CSS display 属性 隐藏必须使用none值，该隐藏不占位，页面源代码可见。 显示可使用空或block或inline，意思分别为：无此属性、显示视为div（有换行符）、显示视为span（无换行符）。CSS visibility 属性 隐藏必须使用hidden值，该隐藏占位，页面源代码可见。 显示可使用空或visible，意思分别为：无此属性、显示。HTML hidden 属性 隐藏只需标注hidden 显示不标注hidden HTML 是内容展示带有语义，CSS 是界面样式相关。HTML hidden 这个属性，就表示与浏览者不相关、不重要，浏览器在解析的时候，既然不相关就直接隐藏掉了。如果你有些东西与用户不相关，比如 提交信息的 input 等，就可以用 hidden。css中display/visibility就是从界面、视觉上的隐藏。如果你需要临时隐藏一些东西后面会再切换出来，比如下拉菜单等，就可以用display/visibility。因为它不是跟用户不相关，只是目前还不能展示出来。 原文出处","tags":[{"name":"html","slug":"html","permalink":"http://zenghua.info/tags/html/"},{"name":"css","slug":"css","permalink":"http://zenghua.info/tags/css/"}]},{"title":"使用阿里云ECS CentOS 搭建Shadowscoks","date":"2016-10-15T11:08:23.000Z","path":"2016/10/15/centos-installation-shadowscoks.html","text":"新加坡服务器 1核CPU 1GB内存 CentOS 7.0 64位1. 安装Shdowsocks服务端1234#安装pipyum install python-pip#使用pip安装shadowsockspip install shadowsocks 2.配置Shdowsocks服务,并启动用vim新建 /etc/shadowsocks.json 文件, 并写入以下内容1234567891011&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:443, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;your-passwd&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;:false, &quot;workers&quot;:5&#125; 注意修改 passwordworkers 表示启动的进程数量shadowsocks启动:ssserver -c /etc/shadowsocks.json -d startshadowsocks关闭:ssserver -c /etc/shadowsocks.json -d stop 3.使用本机Shdowsocks客户端, 连接服务端上网下载客户端windows版本安卓版本下载后将服务器ip、端口、密码依次填好就行了","tags":[{"name":"centos","slug":"centos","permalink":"http://zenghua.info/tags/centos/"},{"name":"Shadowscoks","slug":"Shadowscoks","permalink":"http://zenghua.info/tags/Shadowscoks/"}]},{"title":"centos7.2使用rpm安装jdk8","date":"2016-10-14T12:01:23.000Z","path":"2016/10/14/centos-installation-jdk8.html","text":"①下载jdk去jdk下载页面找到要下载的jdk，用wget下载1wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otnpub/java/jdk/8u131b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm ②安装jdkrpm -ivh jdk-8u131-linux-x64.rpm ③配置环境变量(告诉电脑jdk在哪里)vim /etc/profile //打开环境变量文件 进入insert模式(按字母i) 在最后面加上下面这段，然后按esc 然后保存退出(按 :wq回车)1234JAVA_HOME=/usr/java/jdk1.8.0_131CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/libPATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/binexport PATH CLASSPATH JAVA_HOME source /etc/profile //重新载入 ④检查是否完成安装java -version rmp卸载jdkrpm -qa|grep jdk //查看版本 rpm -e jdk版本 //卸载","tags":[{"name":"centos","slug":"centos","permalink":"http://zenghua.info/tags/centos/"},{"name":"jdk8","slug":"jdk8","permalink":"http://zenghua.info/tags/jdk8/"}]},{"title":"Centos7.2使用yum安装MariaDB10.1","date":"2016-10-10T04:39:04.000Z","path":"2016/10/10/centos-yum-installation-mariadb.html","text":"①添加MariaDB的yum源1.创建MariaDB.repo sudo vi /etc/yum.repos.d/Mariadb.repo 2.将以下文件中的字段添加到MariaDB.repo文件中1234567# MariaDB 10.1 CentOS repository list - created 2016-12-01 03:36 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.1/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 ②yum安装MariaDB sudo yum -y install MariaDB-server MariaDB-client ③启动MariaDB服务systemctl start mysql.service ④配置MariaDB服务使用mysql_secure_installation配置MariaDB服务mysql_secure_installation 具体设置1234567891011121314151617181920212223#由于一开始安装MariaDB数据库后, root用户默认密码为空, 所以只需要按Enter键Enter current password for root (enter for none):#是否设置root用户的新密码Set root password? [Y/n] y#录入新密码New password:#确认新密码Re-enter new password:#是否删除匿名用户,生产环境建议删除Remove anonymous users? [Y/n] y#是否禁止root远程登录,根据自己的需求选择Disallow root login remotely? [Y/n] n#是否删除test数据库Remove test database and access to it? [Y/n] y#是否重新加载权限表Reload privilege tables now? [Y/n] y ⑤开启远程访问1.防火墙添加3306端口查看firewall状态 firewall-cmd –state 状态是not running，启动firewallsystemctl start firewalld 状态是running开放3306端口firewall-cmd –zone=public –add-port=3306/tcp –permanent重新载入firewall-cmd –reload 2.明明之前有设置root开启远程的，但是我这里访问不了，所以重新去MariaDB赋权限12345678#进入Mariadbmysql -uroot -p#选择数据库use mysql;#添加权限Grant all on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;root用户的密码&apos; with grant option;#重新载入flush privileges;","tags":[{"name":"centos","slug":"centos","permalink":"http://zenghua.info/tags/centos/"},{"name":"MariaDB","slug":"MariaDB","permalink":"http://zenghua.info/tags/MariaDB/"}]},{"title":"hello-world","date":"2016-09-29T15:09:44.174Z","path":"2016/09/29/hello-world.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]